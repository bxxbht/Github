###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     22/Nov/2013  11:50:48 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\pragram\STM32F103_FreeRTOS\CMSIS\stm32f10x_it.c       #
#    Command line =  D:\pragram\STM32F103_FreeRTOS\CMSIS\stm32f10x_it.c -D    #
#                    IAR_ARM_CM3 -lcN D:\pragram\STM32F103_FreeRTOS\Debug\Lis #
#                    t\ --diag_suppress Pa082,pe191 -o                        #
#                    D:\pragram\STM32F103_FreeRTOS\Debug\Obj\ --no_cse        #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.4\arm\INC\c\DLib_Config_Full.h" -I                     #
#                    D:\pragram\STM32F103_FreeRTOS\.\ -I                      #
#                    D:\pragram\STM32F103_FreeRTOS\STM32F10x_StdPeriph_Lib_V3 #
#                    .5.0\Libraries\STM32F10x_StdPeriph_Driver\inc\ -I        #
#                    D:\pragram\STM32F103_FreeRTOS\Source\include\ -I         #
#                    D:\pragram\STM32F103_FreeRTOS\Common\include\ -I         #
#                    D:\pragram\STM32F103_FreeRTOS\CMSIS\ -I                  #
#                    D:\pragram\STM32F103_FreeRTOS\user_task\ -I              #
#                    D:\pragram\STM32F103_FreeRTOS\test_task\ -Ol             #
#                    --use_c++_inline                                         #
#    List file    =  D:\pragram\STM32F103_FreeRTOS\Debug\List\stm32f10x_it.ls #
#                    t                                                        #
#    Object file  =  D:\pragram\STM32F103_FreeRTOS\Debug\Obj\stm32f10x_it.o   #
#                                                                             #
#                                                                             #
###############################################################################

D:\pragram\STM32F103_FreeRTOS\CMSIS\stm32f10x_it.c
      1          /**
      2            ******************************************************************************
      3            * @file    DAC/OneChannelDMA_Escalator/stm32f10x_it.c 
      4            * @author  MCD Application Team
      5            * @version V3.5.0
      6            * @date    08-April-2011
      7            * @brief   Main Interrupt Service Routines.
      8            *          This file provides template for all exceptions handler and peripherals
      9            *          interrupt service routine.
     10            ******************************************************************************
     11            * @attention
     12            *
     13            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     14            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     15            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     16            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     17            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     18            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     19            *
     20            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     21            ******************************************************************************
     22            */ 
     23          
     24          /* Includes ------------------------------------------------------------------*/
     25          //#include "stm32f10x_it.h"
     26          /* Includes ------------------------------------------------------------------*/
     27          #include "stm32f10x_it.h"
     28          #include "serial_init.h"  
     29          //#include "Macros.h"
     30          //#include "Head.h"
     31          //#include "Motor.h"
     32          //#include "SPI_FLASH.h"
     33          //#include "Serial.h"
     34          //#include "Paper_Temp_CHK.h"
     35          //#include "Timer.h"
     36          extern void TimingDelay_Decrement(void);
     37          /** @addtogroup STM32F10x_StdPeriph_Examples
     38            * @{
     39            */
     40          
     41          /** @addtogroup DAC_OneChannelDMA_Escalator
     42            * @{
     43            */ 
     44          
     45          /* Private typedef -----------------------------------------------------------*/
     46          /* Private define ------------------------------------------------------------*/
     47          /* Private macro -------------------------------------------------------------*/
     48          /* Private variables ---------------------------------------------------------*/
     49          /* Private function prototypes -----------------------------------------------*/
     50          /* Private functions ---------------------------------------------------------*/
     51          
     52          /******************************************************************************/
     53          /*            Cortex-M3 Processor Exceptions Handlers                         */
     54          /******************************************************************************/
     55          
     56          /**
     57            * @brief  This function handles NMI exception.
     58            * @param  None
     59            * @retval None
     60            */
     61          void NMI_Handler(void)
     62          {
     63          }
     64          
     65          /**
     66            * @brief  This function handles Hard Fault exception.
     67            * @param  None
     68            * @retval None
     69            */
     70          void HardFault_Handler(void)
     71          {
     72            /* Go to infinite loop when Hard Fault exception occurs */
     73            while (1)
     74            {
     75            }
     76          }
     77          
     78          /**
     79            * @brief  This function handles Memory Manage exception.
     80            * @param  None
     81            * @retval None
     82            */
     83          void MemManage_Handler(void)
     84          {
     85            /* Go to infinite loop when Memory Manage exception occurs */
     86            while (1)
     87            {
     88            }
     89          }
     90          
     91          /**
     92            * @brief  This function handles Bus Fault exception.
     93            * @param  None
     94            * @retval None
     95            */
     96          void BusFault_Handler(void)
     97          {
     98            /* Go to infinite loop when Bus Fault exception occurs */
     99            while (1)
    100            {
    101            }
    102          }
    103          
    104          /**
    105            * @brief  This function handles Usage Fault exception.
    106            * @param  None
    107            * @retval None
    108            */
    109          void UsageFault_Handler(void)
    110          {
    111            /* Go to infinite loop when Usage Fault exception occurs */
    112            while (1)
    113            {
    114            }
    115          }
    116          
    117          /**
    118            * @brief  This function handles SVCall exception.
    119            * @param  None
    120            * @retval None
    121            */
    122          void SVC_Handler(void)
    123          {
    124          }
    125          
    126          /**
    127            * @brief  This function handles Debug Monitor exception.
    128            * @param  None
    129            * @retval None
    130            */
    131          void DebugMon_Handler(void)
    132          {
    133          }
    134          
    135          /**
    136            * @brief  This function handles PendSV_Handler exception.
    137            * @param  None
    138            * @retval None
    139            */
    140          void PendSV_Handler(void)
    141          {
    142          }
    143          
    144          /**
    145            * @brief  This function handles SysTick Handler.
    146            * @param  None
    147            * @retval None
    148            */
    149             
    150          void SysTick_Handler(void)
    151          {
    152              //pr_SysTick_Isr();
    153              TimingDelay_Decrement();
    154          }
    155          /*******************************************************************************
    156          * Function Name  : EXTI1_IRQHandler
    157          * Description    : This function handles External interrupt Line 1 request.
    158          * Input          : None
    159          * Output         : None
    160          * Return         : None
    161          *******************************************************************************/
    162          void EXTI1_IRQHandler(void)
    163          {
    164          }
    165          
    166          /*******************************************************************************
    167          * Function Name  : ADC1_2_IRQHandler
    168          * Description    : This function handles ADC1 and ADC2 global interrupt request.
    169          * Input          : None
    170          * Output         : None
    171          * Return         : None
    172          *******************************************************************************/
    173          void ADC1_2_IRQHandler(void)
    174          {
    175          #ifdef _ENABLE_ADC_IT_
    176            //Get configured channel converted value
    177            if(ADC_GetITStatus(ADC1,ADC_IT_EOC)==SET)
    178            {
    179              sHead.mHeadTemp = ADC_GetConversionValue(ADC1); 
    180              ADC_ITConfig(ADC1, ADC_IT_EOC, DISABLE);// Enable ADC1 EOC interupt
    181              ADC_ClearITPendingBit(ADC1, ADC_IT_EOC);
    182            }
    183             
    184             if(ADC_GetITStatus(ADC2,ADC_IT_EOC)==SET)
    185             {
    186               sHead.mPaperADC = ADC_GetConversionValue(ADC2);  
    187               ADC_ITConfig(ADC2, ADC_IT_EOC, DISABLE);// Enable ADC2 EOC interupt
    188               ADC_ClearITPendingBit(ADC2, ADC_IT_EOC);
    189             }
    190          
    191          #endif
    192          }
    193          
    194          /*******************************************************************************
    195          * Function Name  : TIM2_IRQHandler
    196          * Description    : This function handles TIM2 global interrupt request.
    197          * Input          : None
    198          * Output         : None
    199          * Return         : None
    200          *******************************************************************************/
    201          void TIM2_IRQHandler(void)
    202          {
    203            //pr_Timer2_isr();
    204          }
    205          /*******************************************************************************
    206          * Function Name  : TIM3_IRQHandler
    207          * Description    : This function handles TIM3 global interrupt request.
    208          * Input          : None
    209          * Output         : None
    210          * Return         : None
    211          *******************************************************************************/
    212          void TIM3_IRQHandler(void)
    213          {
    214            #ifdef _MOTOR_HARDWARE_TOGGLE_
    215              //pr_Timer3_Isp();
    216            #else
    217              //pr_Timer3_Isp2();
    218            #endif
    219          }
    220          
    221          /*******************************************************************************
    222          * Function Name  : TIM4_IRQHandler
    223          * Description    : This function handles TIM4 global interrupt request.
    224          * Input          : None
    225          * Output         : None
    226          * Return         : None
    227          * Comment        : This needed to be modified
    228          *******************************************************************************/
    229          void TIM4_IRQHandler(void)
    230          {
    231          }
    232          
    233          /*******************************************************************************
    234          * Function Name  : SPI1_IRQHandler
    235          * Description    : This function handles SPI1 global interrupt request.
    236          * Input          : None
    237          * Output         : None
    238          * Return         : None
    239          *******************************************************************************/
    240          void SPI1_IRQHandler(void)
    241          {
    242            //pr_SPI1_isp();
    243          }
    244          
    245          /*******************************************************************************
    246          * Function Name  : SPI2_IRQHandler
    247          * Description    : This function handles SPI2 global interrupt request.
    248          * Input          : None
    249          * Output         : None
    250          * Return         : None
    251          *******************************************************************************/
    252          void SPI2_IRQHandler(void)
    253          {
    254            /*if (SPI_I2S_GetITStatus(SPI2, SPI_I2S_IT_TXE) != RESET)
    255            {
    256              
    257              SPI_I2S_SendData(SPI2,sSpiFlash.mTxData);
    258              SPI_I2S_ITConfig(SPI2, SPI_I2S_IT_TXE, DISABLE);
    259              
    260            }
    261            if (SPI_I2S_GetITStatus(SPI2, SPI_I2S_IT_RXNE) != RESET)
    262            {
    263              sSpiFlash.mRxData=SPI_I2S_ReceiveData(SPI2);
    264              SPI_I2S_ITConfig(SPI2, SPI_I2S_IT_RXNE, DISABLE);
    265            }*/
    266          }
    267          
    268          /*******************************************************************************
    269          * Function Name  : USART1_IRQHandler
    270          * Description    : This function handles USART1 global interrupt request.
    271          * Input          : None
    272          * Output         : None
    273          * Return         : None
    274          *******************************************************************************/
    275          void USART1_IRQHandler(void)
    276          {
    277             APP_USART1_ISR();
    278          }
    279          
    280          /*******************************************************************************
    281          * Function Name  : TIM8_CC_IRQHandler
    282          * Description    : This function handles TIM8 capture compare interrupt request.
    283          * Input          : None
    284          * Output         : None
    285          * Return         : None
    286          *******************************************************************************/
    287          void TIM8_CC_IRQHandler(void)
    288          {
    289            //pr_Timer3_Isp();
    290          }
    291          
    292          /*******************************************************************************
    293          * Function Name  : TIM5_IRQHandler
    294          * Description    : This function handles TIM5 global interrupt request.
    295          * Input          : None
    296          * Output         : None
    297          * Return         : None
    298          *******************************************************************************/
    299          void TIM5_IRQHandler(void)
    300          {
    301            //pr_Timer5_isr();
    302          }
    303          
    304          /*******************************************************************************
    305          * Function Name  : TIM6_IRQHandler
    306          * Description    : This function handles TIM6 global interrupt request.
    307          * Input          : None
    308          * Output         : None
    309          * Return         : None
    310          *******************************************************************************/
    311          void TIM6_IRQHandler(void)
    312          {
    313          }
    314          
    315          
    316          /******************************************************************************/
    317          /*                 STM32F10x Peripherals Interrupt Handlers                   */
    318          /*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
    319          /*  available peripheral interrupt handler's name please refer to the startup */
    320          /*  file (startup_stm32f10x_xx.s).                                            */
    321          /******************************************************************************/
    322          
    323          /**
    324            * @brief  This function handles PPP interrupt request.
    325            * @param  None
    326            * @retval None
    327            */
    328          /*void PPP_IRQHandler(void)
    329          {
    330          }*/
    331          
    332          /**
    333            * @}
    334            */ 
    335          
    336          /**
    337            * @}
    338            */ 
    339          
    340          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  ADC1_2_IRQHandler
        0  BusFault_Handler
        0  DebugMon_Handler
        0  EXTI1_IRQHandler
        0  HardFault_Handler
        0  MemManage_Handler
        0  NMI_Handler
        0  PendSV_Handler
        0  SPI1_IRQHandler
        0  SPI2_IRQHandler
        0  SVC_Handler
        8  SysTick_Handler
             8 -> TimingDelay_Decrement
        0  TIM2_IRQHandler
        0  TIM3_IRQHandler
        0  TIM4_IRQHandler
        0  TIM5_IRQHandler
        0  TIM6_IRQHandler
        0  TIM8_CC_IRQHandler
        8  USART1_IRQHandler
             8 -> APP_USART1_ISR
        0  UsageFault_Handler


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       2  ADC1_2_IRQHandler
       2  BusFault_Handler
       2  DebugMon_Handler
       2  EXTI1_IRQHandler
       2  HardFault_Handler
       2  MemManage_Handler
       2  NMI_Handler
       2  PendSV_Handler
       2  SPI1_IRQHandler
       2  SPI2_IRQHandler
       2  SVC_Handler
       8  SysTick_Handler
       2  TIM2_IRQHandler
       2  TIM3_IRQHandler
       2  TIM4_IRQHandler
       2  TIM5_IRQHandler
       2  TIM6_IRQHandler
       2  TIM8_CC_IRQHandler
       8  USART1_IRQHandler
       2  UsageFault_Handler

 
 52 bytes in section .text
 
 52 bytes of CODE memory

Errors: none
Warnings: none
