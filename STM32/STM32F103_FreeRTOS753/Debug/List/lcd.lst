###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     08/Nov/2013  09:55:33 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\pragram\STM32F103_FreeRTOS\lcd.c                      #
#    Command line =  D:\pragram\STM32F103_FreeRTOS\lcd.c -D VECT_TAB_FLASH    #
#                    -D IAR_ARM_CM3 -lcN D:\pragram\STM32F103_FreeRTOS\Debug\ #
#                    List\ --diag_suppress Pa082,pe191 -o                     #
#                    D:\pragram\STM32F103_FreeRTOS\Debug\Obj\ --no_cse        #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.4\arm\INC\c\DLib_Config_Full.h" -I                     #
#                    D:\pragram\STM32F103_FreeRTOS\.\ -I                      #
#                    D:\pragram\STM32F103_FreeRTOS\STM32F10x_StdPeriph_Lib_V3 #
#                    .5.0\Libraries\STM32F10x_StdPeriph_Driver\inc\ -I        #
#                    D:\pragram\STM32F103_FreeRTOS\Source\include\ -I         #
#                    D:\pragram\STM32F103_FreeRTOS\Common\include\ -I         #
#                    D:\pragram\STM32F103_FreeRTOS\CMSIS\ -Ol                 #
#                    --use_c++_inline                                         #
#    List file    =  D:\pragram\STM32F103_FreeRTOS\Debug\List\lcd.lst         #
#    Object file  =  D:\pragram\STM32F103_FreeRTOS\Debug\Obj\lcd.o            #
#                                                                             #
#                                                                             #
###############################################################################

D:\pragram\STM32F103_FreeRTOS\lcd.c
      1          /******************** (C) COPYRIGHT 2007 STMicroelectronics ********************
      2          * File Name          : lcd.c
      3          * Author             : MCD Application Team
      4          * Date First Issued  : mm/dd/yyyy
      5          * Description        : This file includes the LCD driver for AM-240320LTNQW00H
      6          *                      liquid Crystal Display Module of STM32F10x-EVAL.
      7          ********************************************************************************
      8          * History:
      9          * mm/dd/yyyy
     10          ********************************************************************************
     11          * THE PRESENT SOFTWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     13          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     14          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     15          * CONTENT OF SUCH SOFTWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     16          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17          *******************************************************************************/
     18          
     19          /* Includes ------------------------------------------------------------------*/
     20           //#include "stm32f10x_type.h"
     21          #include "stm32f10x.h"
     22          #include "lcd.h"
     23          #include "spi_flash.h"
     24          
     25          #include "FreeRTOS.h"
     26          #include "task.h"
     27          
     28          /* Private typedef -----------------------------------------------------------*/
     29          /* Private define ------------------------------------------------------------*/
     30               /* ASCII Table: each character is 16 column (16dots large)
     31                  and 24 raw (24 dots high) */
     32               const uc16 ASCII_Table[] =
     33                 {
     34                   /* Space ' ' */
     35                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     36                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     37                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     38                   /* '!' */
     39                   0x0000, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180,
     40                   0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0000, 0x0000,
     41                   0x0180, 0x0180, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     42                   /* '"' */
     43                   0x0000, 0x0000, 0x00CC, 0x00CC, 0x00CC, 0x00CC, 0x00CC, 0x00CC,
     44                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     45                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     46                   /* '#' */
     47                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0C60, 0x0C60,
     48                   0x0C60, 0x0630, 0x0630, 0x1FFE, 0x1FFE, 0x0630, 0x0738, 0x0318,
     49                   0x1FFE, 0x1FFE, 0x0318, 0x0318, 0x018C, 0x018C, 0x018C, 0x0000,
     50                   /* '$' */
     51                   0x0000, 0x0080, 0x03E0, 0x0FF8, 0x0E9C, 0x1C8C, 0x188C, 0x008C,
     52                   0x0098, 0x01F8, 0x07E0, 0x0E80, 0x1C80, 0x188C, 0x188C, 0x189C,
     53                   0x0CB8, 0x0FF0, 0x03E0, 0x0080, 0x0080, 0x0000, 0x0000, 0x0000,
     54                   /* '%' */
     55                   0x0000, 0x0000, 0x0000, 0x180E, 0x0C1B, 0x0C11, 0x0611, 0x0611,
     56                   0x0311, 0x0311, 0x019B, 0x018E, 0x38C0, 0x6CC0, 0x4460, 0x4460,
     57                   0x4430, 0x4430, 0x4418, 0x6C18, 0x380C, 0x0000, 0x0000, 0x0000,
     58                   /* '&' */
     59                   0x0000, 0x01E0, 0x03F0, 0x0738, 0x0618, 0x0618, 0x0330, 0x01F0,
     60                   0x00F0, 0x00F8, 0x319C, 0x330E, 0x1E06, 0x1C06, 0x1C06, 0x3F06,
     61                   0x73FC, 0x21F0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     62                   /* ''' */
     63                   0x0000, 0x0000, 0x000C, 0x000C, 0x000C, 0x000C, 0x000C, 0x000C,
     64                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     65                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     66                   /* '(' */
     67                   0x0000, 0x0200, 0x0300, 0x0180, 0x00C0, 0x00C0, 0x0060, 0x0060,
     68                   0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030,
     69                   0x0060, 0x0060, 0x00C0, 0x00C0, 0x0180, 0x0300, 0x0200, 0x0000,
     70                   /* ')' */
     71                   0x0000, 0x0020, 0x0060, 0x00C0, 0x0180, 0x0180, 0x0300, 0x0300,
     72                   0x0600, 0x0600, 0x0600, 0x0600, 0x0600, 0x0600, 0x0600, 0x0600,
     73                   0x0300, 0x0300, 0x0180, 0x0180, 0x00C0, 0x0060, 0x0020, 0x0000,
     74                   /* '*' */
     75                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x00C0, 0x00C0,
     76                   0x06D8, 0x07F8, 0x01E0, 0x0330, 0x0738, 0x0000, 0x0000, 0x0000,
     77                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     78                   /* '+' */
     79                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0180, 0x0180,
     80                   0x0180, 0x0180, 0x0180, 0x3FFC, 0x3FFC, 0x0180, 0x0180, 0x0180,
     81                   0x0180, 0x0180, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     82                   /* ',' */
     83                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     84                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     85                   0x0000, 0x0180, 0x0180, 0x0100, 0x0100, 0x0080, 0x0000, 0x0000,
     86                   /* '-' */
     87                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     88                   0x0000, 0x0000, 0x0000, 0x0000, 0x07E0, 0x07E0, 0x0000, 0x0000,
     89                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     90                   /* '.' */
     91                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     92                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     93                   0x0000, 0x00C0, 0x00C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     94                   /* '/' */
     95                   0x0000, 0x0C00, 0x0C00, 0x0600, 0x0600, 0x0600, 0x0300, 0x0300,
     96                   0x0300, 0x0380, 0x0180, 0x0180, 0x0180, 0x00C0, 0x00C0, 0x00C0,
     97                   0x0060, 0x0060, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     98                   /* '0' */
     99                   0x0000, 0x03E0, 0x07F0, 0x0E38, 0x0C18, 0x180C, 0x180C, 0x180C,
    100                   0x180C, 0x180C, 0x180C, 0x180C, 0x180C, 0x180C, 0x0C18, 0x0E38,
    101                   0x07F0, 0x03E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    102                   /* '1' */
    103                   0x0000, 0x0100, 0x0180, 0x01C0, 0x01F0, 0x0198, 0x0188, 0x0180,
    104                   0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180,
    105                   0x0180, 0x0180, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    106                   /* '2' */
    107                   0x0000, 0x03E0, 0x0FF8, 0x0C18, 0x180C, 0x180C, 0x1800, 0x1800,
    108                   0x0C00, 0x0600, 0x0300, 0x0180, 0x00C0, 0x0060, 0x0030, 0x0018,
    109                   0x1FFC, 0x1FFC, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    110                   /* '3' */
    111                   0x0000, 0x01E0, 0x07F8, 0x0E18, 0x0C0C, 0x0C0C, 0x0C00, 0x0600,
    112                   0x03C0, 0x07C0, 0x0C00, 0x1800, 0x1800, 0x180C, 0x180C, 0x0C18,
    113                   0x07F8, 0x03E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    114                   /* '4' */
    115                   0x0000, 0x0C00, 0x0E00, 0x0F00, 0x0F00, 0x0D80, 0x0CC0, 0x0C60,
    116                   0x0C60, 0x0C30, 0x0C18, 0x0C0C, 0x3FFC, 0x3FFC, 0x0C00, 0x0C00,
    117                   0x0C00, 0x0C00, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    118                   /* '5' */
    119                   0x0000, 0x0FF8, 0x0FF8, 0x0018, 0x0018, 0x000C, 0x03EC, 0x07FC,
    120                   0x0E1C, 0x1C00, 0x1800, 0x1800, 0x1800, 0x180C, 0x0C1C, 0x0E18,
    121                   0x07F8, 0x03E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    122                   /* '6' */
    123                   0x0000, 0x07C0, 0x0FF0, 0x1C38, 0x1818, 0x0018, 0x000C, 0x03CC,
    124                   0x0FEC, 0x0E3C, 0x1C1C, 0x180C, 0x180C, 0x180C, 0x1C18, 0x0E38,
    125                   0x07F0, 0x03E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    126                   /* '7' */
    127                   0x0000, 0x1FFC, 0x1FFC, 0x0C00, 0x0600, 0x0600, 0x0300, 0x0380,
    128                   0x0180, 0x01C0, 0x00C0, 0x00E0, 0x0060, 0x0060, 0x0070, 0x0030,
    129                   0x0030, 0x0030, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    130                   /* '8' */
    131                   0x0000, 0x03E0, 0x07F0, 0x0E38, 0x0C18, 0x0C18, 0x0C18, 0x0638,
    132                   0x07F0, 0x07F0, 0x0C18, 0x180C, 0x180C, 0x180C, 0x180C, 0x0C38,
    133                   0x0FF8, 0x03E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    134                   /* '9' */
    135                   0x0000, 0x03E0, 0x07F0, 0x0E38, 0x0C1C, 0x180C, 0x180C, 0x180C,
    136                   0x1C1C, 0x1E38, 0x1BF8, 0x19E0, 0x1800, 0x0C00, 0x0C00, 0x0E1C,
    137                   0x07F8, 0x01F0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    138                   /* ':' */
    139                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0180, 0x0180,
    140                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    141                   0x0180, 0x0180, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    142                   /* ';' */
    143                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0180, 0x0180,
    144                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    145                   0x0180, 0x0180, 0x0100, 0x0100, 0x0080, 0x0000, 0x0000, 0x0000,
    146                   /* '<' */
    147                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    148                   0x1000, 0x1C00, 0x0F80, 0x03E0, 0x00F8, 0x0018, 0x00F8, 0x03E0,
    149                   0x0F80, 0x1C00, 0x1000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    150                   /* '=' */
    151                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    152                   0x1FF8, 0x0000, 0x0000, 0x0000, 0x1FF8, 0x0000, 0x0000, 0x0000,
    153                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    154                   /* '>' */
    155                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    156                   0x0008, 0x0038, 0x01F0, 0x07C0, 0x1F00, 0x1800, 0x1F00, 0x07C0,
    157                   0x01F0, 0x0038, 0x0008, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    158                   /* '?' */
    159                   0x0000, 0x03E0, 0x0FF8, 0x0C18, 0x180C, 0x180C, 0x1800, 0x0C00,
    160                   0x0600, 0x0300, 0x0180, 0x00C0, 0x00C0, 0x00C0, 0x0000, 0x0000,
    161                   0x00C0, 0x00C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    162                   /* '@' */
    163                   0x0000, 0x0000, 0x07E0, 0x1818, 0x2004, 0x29C2, 0x4A22, 0x4411,
    164                   0x4409, 0x4409, 0x4409, 0x2209, 0x1311, 0x0CE2, 0x4002, 0x2004,
    165                   0x1818, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    166                   /* 'A' */
    167                   0x0000, 0x0380, 0x0380, 0x06C0, 0x06C0, 0x06C0, 0x0C60, 0x0C60,
    168                   0x1830, 0x1830, 0x1830, 0x3FF8, 0x3FF8, 0x701C, 0x600C, 0x600C,
    169                   0xC006, 0xC006, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    170                   /* 'B' */
    171                   0x0000, 0x03FC, 0x0FFC, 0x0C0C, 0x180C, 0x180C, 0x180C, 0x0C0C,
    172                   0x07FC, 0x0FFC, 0x180C, 0x300C, 0x300C, 0x300C, 0x300C, 0x180C,
    173                   0x1FFC, 0x07FC, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    174                   /* 'C' */
    175                   0x0000, 0x07C0, 0x1FF0, 0x3838, 0x301C, 0x700C, 0x6006, 0x0006,
    176                   0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x6006, 0x700C, 0x301C,
    177                   0x1FF0, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    178                   /* 'D' */
    179                   0x0000, 0x03FE, 0x0FFE, 0x0E06, 0x1806, 0x1806, 0x3006, 0x3006,
    180                   0x3006, 0x3006, 0x3006, 0x3006, 0x3006, 0x1806, 0x1806, 0x0E06,
    181                   0x0FFE, 0x03FE, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    182                   /* 'E' */
    183                   0x0000, 0x3FFC, 0x3FFC, 0x000C, 0x000C, 0x000C, 0x000C, 0x000C,
    184                   0x1FFC, 0x1FFC, 0x000C, 0x000C, 0x000C, 0x000C, 0x000C, 0x000C,
    185                   0x3FFC, 0x3FFC, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    186                   /* 'F' */
    187                   0x0000, 0x3FF8, 0x3FF8, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018,
    188                   0x1FF8, 0x1FF8, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018,
    189                   0x0018, 0x0018, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    190                   /* 'G' */
    191                   0x0000, 0x0FE0, 0x3FF8, 0x783C, 0x600E, 0xE006, 0xC007, 0x0003,
    192                   0x0003, 0xFE03, 0xFE03, 0xC003, 0xC007, 0xC006, 0xC00E, 0xF03C,
    193                   0x3FF8, 0x0FE0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    194                   /* 'H' */
    195                   0x0000, 0x300C, 0x300C, 0x300C, 0x300C, 0x300C, 0x300C, 0x300C,
    196                   0x3FFC, 0x3FFC, 0x300C, 0x300C, 0x300C, 0x300C, 0x300C, 0x300C,
    197                   0x300C, 0x300C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    198                   /* 'I' */
    199                   0x0000, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180,
    200                   0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180,
    201                   0x0180, 0x0180, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    202                   /* 'J' */
    203                   0x0000, 0x0600, 0x0600, 0x0600, 0x0600, 0x0600, 0x0600, 0x0600,
    204                   0x0600, 0x0600, 0x0600, 0x0600, 0x0600, 0x0618, 0x0618, 0x0738,
    205                   0x03F0, 0x01E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    206                   /* 'K' */
    207                   0x0000, 0x3006, 0x1806, 0x0C06, 0x0606, 0x0306, 0x0186, 0x00C6,
    208                   0x0066, 0x0076, 0x00DE, 0x018E, 0x0306, 0x0606, 0x0C06, 0x1806,
    209                   0x3006, 0x6006, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    210                   /* 'L' */
    211                   0x0000, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018,
    212                   0x0018, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018,
    213                   0x1FF8, 0x1FF8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    214                   /* 'M' */
    215                   0x0000, 0xE00E, 0xF01E, 0xF01E, 0xF01E, 0xD836, 0xD836, 0xD836,
    216                   0xD836, 0xCC66, 0xCC66, 0xCC66, 0xC6C6, 0xC6C6, 0xC6C6, 0xC6C6,
    217                   0xC386, 0xC386, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    218                   /* 'N' */
    219                   0x0000, 0x300C, 0x301C, 0x303C, 0x303C, 0x306C, 0x306C, 0x30CC,
    220                   0x30CC, 0x318C, 0x330C, 0x330C, 0x360C, 0x360C, 0x3C0C, 0x3C0C,
    221                   0x380C, 0x300C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    222                   /* 'O' */
    223                   0x0000, 0x07E0, 0x1FF8, 0x381C, 0x700E, 0x6006, 0xC003, 0xC003,
    224                   0xC003, 0xC003, 0xC003, 0xC003, 0xC003, 0x6006, 0x700E, 0x381C,
    225                   0x1FF8, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    226                   /* 'P' */
    227                   0x0000, 0x0FFC, 0x1FFC, 0x380C, 0x300C, 0x300C, 0x300C, 0x300C,
    228                   0x180C, 0x1FFC, 0x07FC, 0x000C, 0x000C, 0x000C, 0x000C, 0x000C,
    229                   0x000C, 0x000C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    230                   /* 'Q' */
    231                   0x0000, 0x07E0, 0x1FF8, 0x381C, 0x700E, 0x6006, 0xE003, 0xC003,
    232                   0xC003, 0xC003, 0xC003, 0xC003, 0xE007, 0x6306, 0x3F0E, 0x3C1C,
    233                   0x3FF8, 0xF7E0, 0xC000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    234                   /* 'R' */
    235                   0x0000, 0x0FFE, 0x1FFE, 0x3806, 0x3006, 0x3006, 0x3006, 0x3806,
    236                   0x1FFE, 0x07FE, 0x0306, 0x0606, 0x0C06, 0x1806, 0x1806, 0x3006,
    237                   0x3006, 0x6006, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    238                   /* 'S' */
    239                   0x0000, 0x03E0, 0x0FF8, 0x0C1C, 0x180C, 0x180C, 0x000C, 0x001C,
    240                   0x03F8, 0x0FE0, 0x1E00, 0x3800, 0x3006, 0x3006, 0x300E, 0x1C1C,
    241                   0x0FF8, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    242                   /* 'T' */
    243                   0x0000, 0x7FFE, 0x7FFE, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180,
    244                   0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180,
    245                   0x0180, 0x0180, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    246                   /* 'U' */
    247                   0x0000, 0x300C, 0x300C, 0x300C, 0x300C, 0x300C, 0x300C, 0x300C,
    248                   0x300C, 0x300C, 0x300C, 0x300C, 0x300C, 0x300C, 0x300C, 0x1818,
    249                   0x1FF8, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    250                   /* 'V' */
    251                   0x0000, 0x6003, 0x3006, 0x3006, 0x3006, 0x180C, 0x180C, 0x180C,
    252                   0x0C18, 0x0C18, 0x0E38, 0x0630, 0x0630, 0x0770, 0x0360, 0x0360,
    253                   0x01C0, 0x01C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    254                   /* 'W' */
    255                   0x0000, 0x6003, 0x61C3, 0x61C3, 0x61C3, 0x3366, 0x3366, 0x3366,
    256                   0x3366, 0x3366, 0x3366, 0x1B6C, 0x1B6C, 0x1B6C, 0x1A2C, 0x1E3C,
    257                   0x0E38, 0x0E38, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    258                   /* 'X' */
    259                   0x0000, 0xE00F, 0x700C, 0x3018, 0x1830, 0x0C70, 0x0E60, 0x07C0,
    260                   0x0380, 0x0380, 0x03C0, 0x06E0, 0x0C70, 0x1C30, 0x1818, 0x300C,
    261                   0x600E, 0xE007, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    262                   /* 'Y' */
    263                   0x0000, 0xC003, 0x6006, 0x300C, 0x381C, 0x1838, 0x0C30, 0x0660,
    264                   0x07E0, 0x03C0, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180,
    265                   0x0180, 0x0180, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    266                   /* 'Z' */
    267                   0x0000, 0x7FFC, 0x7FFC, 0x6000, 0x3000, 0x1800, 0x0C00, 0x0600,
    268                   0x0300, 0x0180, 0x00C0, 0x0060, 0x0030, 0x0018, 0x000C, 0x0006,
    269                   0x7FFE, 0x7FFE, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    270                   /* '[' */
    271                   0x0000, 0x03E0, 0x03E0, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060,
    272                   0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060,
    273                   0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x03E0, 0x03E0, 0x0000,
    274                   /* '\' */
    275                   0x0000, 0x0030, 0x0030, 0x0060, 0x0060, 0x0060, 0x00C0, 0x00C0,
    276                   0x00C0, 0x01C0, 0x0180, 0x0180, 0x0180, 0x0300, 0x0300, 0x0300,
    277                   0x0600, 0x0600, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    278                   /* ']' */
    279                   0x0000, 0x03E0, 0x03E0, 0x0300, 0x0300, 0x0300, 0x0300, 0x0300,
    280                   0x0300, 0x0300, 0x0300, 0x0300, 0x0300, 0x0300, 0x0300, 0x0300,
    281                   0x0300, 0x0300, 0x0300, 0x0300, 0x0300, 0x03E0, 0x03E0, 0x0000,
    282                   /* '^' */
    283                   0x0000, 0x0000, 0x01C0, 0x01C0, 0x0360, 0x0360, 0x0360, 0x0630,
    284                   0x0630, 0x0C18, 0x0C18, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    285                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    286                   /* '_' */
    287                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    288                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    289                   0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    290                   /* ''' */
    291                   0x0000, 0x000C, 0x000C, 0x000C, 0x000C, 0x000C, 0x000C, 0x0000,
    292                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    293                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    294                   /* 'a' */
    295                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03F0, 0x07F8,
    296                   0x0C1C, 0x0C0C, 0x0F00, 0x0FF0, 0x0CF8, 0x0C0C, 0x0C0C, 0x0F1C,
    297                   0x0FF8, 0x18F0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    298                   /* 'b' */
    299                   0x0000, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018, 0x03D8, 0x0FF8,
    300                   0x0C38, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x0C38,
    301                   0x0FF8, 0x03D8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    302                   /* 'c' */
    303                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03C0, 0x07F0,
    304                   0x0E30, 0x0C18, 0x0018, 0x0018, 0x0018, 0x0018, 0x0C18, 0x0E30,
    305                   0x07F0, 0x03C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    306                   /* 'd' */
    307                   0x0000, 0x1800, 0x1800, 0x1800, 0x1800, 0x1800, 0x1BC0, 0x1FF0,
    308                   0x1C30, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1C30,
    309                   0x1FF0, 0x1BC0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    310                   /* 'e' */
    311                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03C0, 0x0FF0,
    312                   0x0C30, 0x1818, 0x1FF8, 0x1FF8, 0x0018, 0x0018, 0x1838, 0x1C30,
    313                   0x0FF0, 0x07C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    314                   /* 'f' */
    315                   0x0000, 0x0F80, 0x0FC0, 0x00C0, 0x00C0, 0x00C0, 0x07F0, 0x07F0,
    316                   0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0,
    317                   0x00C0, 0x00C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    318                   /* 'g' */
    319                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0DE0, 0x0FF8,
    320                   0x0E18, 0x0C0C, 0x0C0C, 0x0C0C, 0x0C0C, 0x0C0C, 0x0C0C, 0x0E18,
    321                   0x0FF8, 0x0DE0, 0x0C00, 0x0C0C, 0x061C, 0x07F8, 0x01F0, 0x0000,
    322                   /* 'h' */
    323                   0x0000, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018, 0x07D8, 0x0FF8,
    324                   0x1C38, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818,
    325                   0x1818, 0x1818, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    326                   /* 'i' */
    327                   0x0000, 0x00C0, 0x00C0, 0x0000, 0x0000, 0x0000, 0x00C0, 0x00C0,
    328                   0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0,
    329                   0x00C0, 0x00C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    330                   /* 'j' */
    331                   0x0000, 0x00C0, 0x00C0, 0x0000, 0x0000, 0x0000, 0x00C0, 0x00C0,
    332                   0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0,
    333                   0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00F8, 0x0078, 0x0000,
    334                   /* 'k' */
    335                   0x0000, 0x000C, 0x000C, 0x000C, 0x000C, 0x000C, 0x0C0C, 0x060C,
    336                   0x030C, 0x018C, 0x00CC, 0x006C, 0x00FC, 0x019C, 0x038C, 0x030C,
    337                   0x060C, 0x0C0C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    338                   /* 'l' */
    339                   0x0000, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0,
    340                   0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0,
    341                   0x00C0, 0x00C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    342                   /* 'm' */
    343                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x3C7C, 0x7EFF,
    344                   0xE3C7, 0xC183, 0xC183, 0xC183, 0xC183, 0xC183, 0xC183, 0xC183,
    345                   0xC183, 0xC183, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    346                   /* 'n' */
    347                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0798, 0x0FF8,
    348                   0x1C38, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818,
    349                   0x1818, 0x1818, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    350                   /* 'o' */
    351                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03C0, 0x0FF0,
    352                   0x0C30, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x0C30,
    353                   0x0FF0, 0x03C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    354                   /* 'p' */
    355                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03D8, 0x0FF8,
    356                   0x0C38, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x0C38,
    357                   0x0FF8, 0x03D8, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018, 0x0000,
    358                   /* 'q' */
    359                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1BC0, 0x1FF0,
    360                   0x1C30, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1C30,
    361                   0x1FF0, 0x1BC0, 0x1800, 0x1800, 0x1800, 0x1800, 0x1800, 0x0000,
    362                   /* 'r' */
    363                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x07B0, 0x03F0,
    364                   0x0070, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030,
    365                   0x0030, 0x0030, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    366                   /* 's' */
    367                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03E0, 0x03F0,
    368                   0x0E38, 0x0C18, 0x0038, 0x03F0, 0x07C0, 0x0C00, 0x0C18, 0x0E38,
    369                   0x07F0, 0x03E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    370                   /* 't' */
    371                   0x0000, 0x0000, 0x0080, 0x00C0, 0x00C0, 0x00C0, 0x07F0, 0x07F0,
    372                   0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0,
    373                   0x07C0, 0x0780, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    374                   /* 'u' */
    375                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1818, 0x1818,
    376                   0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1C38,
    377                   0x1FF0, 0x19E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    378                   /* 'v' */
    379                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x180C, 0x0C18,
    380                   0x0C18, 0x0C18, 0x0630, 0x0630, 0x0630, 0x0360, 0x0360, 0x0360,
    381                   0x01C0, 0x01C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    382                   /* 'w' */
    383                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x41C1, 0x41C1,
    384                   0x61C3, 0x6363, 0x6363, 0x6363, 0x3636, 0x3636, 0x3636, 0x1C1C,
    385                   0x1C1C, 0x1C1C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    386                   /* 'x' */
    387                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x381C, 0x1C38,
    388                   0x0C30, 0x0660, 0x0360, 0x0360, 0x0360, 0x0360, 0x0660, 0x0C30,
    389                   0x1C38, 0x381C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    390                   /* 'y' */
    391                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x3018, 0x1830,
    392                   0x1830, 0x1870, 0x0C60, 0x0C60, 0x0CE0, 0x06C0, 0x06C0, 0x0380,
    393                   0x0380, 0x0380, 0x0180, 0x0180, 0x01C0, 0x00F0, 0x0070, 0x0000,
    394                   /* 'z' */
    395                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1FFC, 0x1FFC,
    396                   0x0C00, 0x0600, 0x0300, 0x0180, 0x00C0, 0x0060, 0x0030, 0x0018,
    397                   0x1FFC, 0x1FFC, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    398                   /* '{' */
    399                   0x0000, 0x0300, 0x0180, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0,
    400                   0x00C0, 0x0060, 0x0060, 0x0030, 0x0060, 0x0040, 0x00C0, 0x00C0,
    401                   0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x0180, 0x0300, 0x0000, 0x0000,
    402                   /* '|' */
    403                   0x0000, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180,
    404                   0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180,
    405                   0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0000,
    406                   /* '}' */
    407                   0x0000, 0x0060, 0x00C0, 0x01C0, 0x0180, 0x0180, 0x0180, 0x0180,
    408                   0x0180, 0x0300, 0x0300, 0x0600, 0x0300, 0x0100, 0x0180, 0x0180,
    409                   0x0180, 0x0180, 0x0180, 0x0180, 0x00C0, 0x0060, 0x0000, 0x0000,
    410                   /* '~' */
    411                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    412                   0x10F0, 0x1FF8, 0x0F08, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    413                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    414                };
    415          /* Private macro -------------------------------------------------------------*/
    416          /* Private variables ---------------------------------------------------------*/
    417            /* Global variables to set the written text color */
    418          static  vu16 TextColor = 0x0000, BackColor = 0xFFFF;
    419          
    420          /* Private function prototypes -----------------------------------------------*/
    421          /* Private functions ---------------------------------------------------------*/
    422          static u32 StrLength(u8 *Str);
    423          
    424          /*******************************************************************************
    425          * Function Name  : LCD_Init
    426          * Description    : Initializes LCD.
    427          * Input          : None
    428          * Output         : None
    429          * Return         : None
    430          *******************************************************************************/
    431          void LCD_Init(void)
    432          {
    433          /* Configure the LCD Control pins --------------------------------------------*/
    434            LCD_CtrlLinesConfig();
    435          
    436          /* Configure the SPI2 interface ----------------------------------------------*/
    437            LCD_SPIConfig();
    438          
    439          /* Enable the LCD Oscillator -------------------------------------------------*/
    440            LCD_WriteReg(R1, 0x10);
    441            LCD_WriteReg(R0, 0xA0);
    442            LCD_WriteReg(R3, 0x01);
    443            vTaskDelay( 10 / portTICK_RATE_MS ); /* Delay 10 ms */
    444            LCD_WriteReg(R3, 0x00);
    445            LCD_WriteReg(R43, 0x04);
    446          
    447            LCD_WriteReg(R40, 0x18);
    448            LCD_WriteReg(R26, 0x05);
    449            LCD_WriteReg(R37, 0x05);
    450            LCD_WriteReg(R25, 0x00);
    451          
    452          /* LCD Power On --------------------------------------------------------------*/
    453            LCD_WriteReg(R28, 0x73);
    454            LCD_WriteReg(R36, 0x74);
    455            LCD_WriteReg(R30, 0x01);
    456            LCD_WriteReg(R24, 0xC1);
    457            vTaskDelay( 10 / portTICK_RATE_MS ); /* Delay 10 ms */
    458            LCD_WriteReg(R24, 0xE1);
    459            LCD_WriteReg(R24, 0xF1);
    460            vTaskDelay( 60 / portTICK_RATE_MS ); /* Delay 60 ms */
    461            LCD_WriteReg(R24, 0xF5);
    462            vTaskDelay( 60 / portTICK_RATE_MS ); /* Delay 60 ms */
    463            LCD_WriteReg(R27, 0x09);
    464            vTaskDelay( 10 / portTICK_RATE_MS ); /* Delay 10 ms */
    465            LCD_WriteReg(R31, 0x11);
    466            LCD_WriteReg(R32, 0x0E);
    467            LCD_WriteReg(R30, 0x81);
    468            vTaskDelay( 10 / portTICK_RATE_MS ); /* Delay 10 ms */
    469          
    470          /* Chip Set ------------------------------------------------------------------*/
    471            LCD_WriteReg(R157, 0x00);
    472            LCD_WriteReg(R192, 0x00);
    473          
    474            LCD_WriteReg(R14, 0x00);
    475            LCD_WriteReg(R15, 0x00);
    476            LCD_WriteReg(R16, 0x00);
    477            LCD_WriteReg(R17, 0x00);
    478            LCD_WriteReg(R18, 0x00);
    479            LCD_WriteReg(R19, 0x00);
    480            LCD_WriteReg(R20, 0x00);
    481            LCD_WriteReg(R21, 0x00);
    482            LCD_WriteReg(R22, 0x00);
    483            LCD_WriteReg(R23, 0x00);
    484          
    485            LCD_WriteReg(R52, 0x01);
    486            LCD_WriteReg(R53, 0x00);
    487          
    488            LCD_WriteReg(R75, 0x00);
    489            LCD_WriteReg(R76, 0x00);
    490            LCD_WriteReg(R78, 0x00);
    491            LCD_WriteReg(R79, 0x00);
    492            LCD_WriteReg(R80, 0x00);
    493          
    494            LCD_WriteReg(R60, 0x00);
    495            LCD_WriteReg(R61, 0x00);
    496            LCD_WriteReg(R62, 0x01);
    497            LCD_WriteReg(R63, 0x3F);
    498            LCD_WriteReg(R64, 0x02);
    499            LCD_WriteReg(R65, 0x02);
    500            LCD_WriteReg(R66, 0x00);
    501            LCD_WriteReg(R67, 0x00);
    502            LCD_WriteReg(R68, 0x00);
    503            LCD_WriteReg(R69, 0x00);
    504            LCD_WriteReg(R70, 0xEF);
    505            LCD_WriteReg(R71, 0x00);
    506            LCD_WriteReg(R72, 0x00);
    507            LCD_WriteReg(R73, 0x01);
    508            LCD_WriteReg(R74, 0x3F);
    509          
    510            LCD_WriteReg(R29, 0x08);  /* R29:Gate scan direction setting */
    511          
    512            LCD_WriteReg(R134, 0x00);
    513            LCD_WriteReg(R135, 0x30);
    514            LCD_WriteReg(R136, 0x02);
    515            LCD_WriteReg(R137, 0x05);
    516          
    517            LCD_WriteReg(R141, 0x01);  /* R141:Register set-up mode for one line clock */
    518            LCD_WriteReg(R139, 0x20);  /* R139:One line SYSCLK number in one-line */
    519            LCD_WriteReg(R51, 0x01);  /* R51:N line inversion setting */
    520            LCD_WriteReg(R55, 0x01);  /* R55:Scanning method setting */
    521            LCD_WriteReg(R118, 0x00);
    522          
    523          /* Gamma Set -----------------------------------------------------------------*/
    524            LCD_WriteReg(R143, 0x10);
    525            LCD_WriteReg(R144, 0x67);
    526            LCD_WriteReg(R145, 0x07);
    527            LCD_WriteReg(R146, 0x65);
    528            LCD_WriteReg(R147, 0x07);
    529            LCD_WriteReg(R148, 0x01);
    530            LCD_WriteReg(R149, 0x76);
    531            LCD_WriteReg(R150, 0x56);
    532            LCD_WriteReg(R151, 0x00);
    533            LCD_WriteReg(R152, 0x06);
    534            LCD_WriteReg(R153, 0x03);
    535            LCD_WriteReg(R154, 0x00);
    536          
    537          /* Display On ----------------------------------------------------------------*/
    538            LCD_WriteReg(R1, 0x50);
    539            LCD_WriteReg(R5, 0x04);
    540          
    541            LCD_WriteReg(R0, 0x80);
    542            LCD_WriteReg(R59, 0x01);
    543            vTaskDelay( 40 / portTICK_RATE_MS );  /* Delay 40 ms */
    544            LCD_WriteReg(R0, 0x20);
    545          }
    546          
    547          /*******************************************************************************
    548          * Function Name  : LCD_SetTextColor
    549          * Description    : Sets the Text color.
    550          * Input          : - Color: specifies the Text color code RGB(5-6-5).
    551          * Output         : - TextColor: Text color global variable used by LCD_DrawChar
    552          *                  and LCD_DrawPicture functions.
    553          * Return         : None
    554          *******************************************************************************/
    555          void LCD_SetTextColor(vu16 Color)
    556          {
    557            TextColor = Color;
    558          }
    559          
    560          /*******************************************************************************
    561          * Function Name  : LCD_SetBackColor
    562          * Description    : Sets the Background color.
    563          * Input          : - Color: specifies the Background color code RGB(5-6-5).
    564          * Output         : - BackColor: Background color global variable used by
    565          *                  LCD_DrawChar and LCD_DrawPicture functions.
    566          * Return         : None
    567          *******************************************************************************/
    568          void LCD_SetBackColor(vu16 Color)
    569          {
    570            BackColor = Color;
    571          }
    572          
    573          /*******************************************************************************
    574          * Function Name  : LCD_ClearLine
    575          * Description    : Clears the selected line.
    576          * Input          : - Line: the Line to be cleared.
    577          *                    This parameter can be one of the following values:
    578          *                       - Linex: where x can be 0..9
    579          * Output         : None
    580          * Return         : None
    581          *******************************************************************************/
    582          void LCD_ClearLine(u8 Line)
    583          {
    584            LCD_DisplayStringLine(Line, "                    ");
    585          }
    586          
    587          /*******************************************************************************
    588          * Function Name  : LCD_Clear
    589          * Description    : Clears the hole LCD.
    590          * Input          : None
    591          * Output         : None
    592          * Return         : None
    593          *******************************************************************************/
    594          void LCD_Clear(void)
    595          {
    596            u32 index = 0;
    597          
    598            LCD_SetCursor(0x00, 0x013F);
    599          
    600            for(index = 0; index < 0x12C00; index++)
    601            {
    602              LCD_WriteRAM(White);
    603            }
    604          }
    605          
    606          /*******************************************************************************
    607          * Function Name  : LCD_SetCursor
    608          * Description    : Sets the cursor position.
    609          * Input          : - Xpos: specifies the X position.
    610          *                  - Ypos: specifies the Y position.
    611          * Output         : None
    612          * Return         : None
    613          *******************************************************************************/
    614          void LCD_SetCursor(u8 Xpos, u16 Ypos)
    615          {
    616            LCD_WriteReg(R66, Xpos);
    617            LCD_WriteReg(R67, ((Ypos & 0x100)>> 8));
    618            LCD_WriteReg(R68, (Ypos & 0xFF));
    619          }
    620          
    621          /*******************************************************************************
    622          * Function Name  : LCD_DrawChar
    623          * Description    : Draws a character on LCD.
    624          * Input          : - Xpos: the Line where to display the character shape.
    625          *                    This parameter can be one of the following values:
    626          *                       - Linex: where x can be 0..9
    627          *                  - Ypos: start column address.
    628          *                  - c: pointer to the character data.
    629          * Output         : None
    630          * Return         : None
    631          *******************************************************************************/
    632          void LCD_DrawChar(u8 Xpos, u16 Ypos, uc16 *c)
    633          {
    634            u32 index = 0, i = 0;
    635            u8 Xaddress = 0;
    636          
    637            Xaddress = Xpos;
    638          
    639            LCD_SetCursor(Xaddress, Ypos);
    640          
    641            for(index = 0; index < 24; index++)
    642            {
    643              for(i = 0; i < 16; i++)
    644              {
    645                if((c[index] & (1 << i)) == 0x00)
    646                {
    647                  LCD_WriteRAM(BackColor);
    648                }
    649                else
    650                {
    651                  LCD_WriteRAM(TextColor);
    652                }
    653              }
    654              Xaddress++;
    655              LCD_SetCursor(Xaddress, Ypos);
    656            }
    657          }
    658          
    659          /*******************************************************************************
    660          * Function Name  : LCD_DisplayChar
    661          * Description    : Displays one character (16dots width, 24dots height).
    662          * Input          : - Line: the Line where to display the character shape .
    663          *                    This parameter can be one of the following values:
    664          *                       - Linex: where x can be 0..9
    665          *                  - Column: start column address.
    666          *                  - Ascii: character ascii code, must be between 0x20 and 0x7E.
    667          * Output         : None
    668          * Return         : None
    669          *******************************************************************************/
    670          void LCD_DisplayChar(u8 Line, u16 Column, u8 Ascii)
    671          {
    672            Ascii -= 32;
    673            LCD_DrawChar(Line, Column, &ASCII_Table[Ascii * 24]);
    674          }
    675          
    676          /*******************************************************************************
    677          * Function Name  : LCD_DisplayStringLine
    678          * Description    : Displays a maximum of 20 char on the LCD.
    679          * Input          : - Line: the Line where to display the character shape .
    680          *                    This parameter can be one of the following values:
    681          *                       - Linex: where x can be 0..9
    682          *                  - *ptr: pointer to string to display on LCD.
    683          * Output         : None
    684          * Return         : None
    685          *******************************************************************************/
    686          void LCD_DisplayStringLine(u8 Line, u8 *ptr)
    687          {
    688            u32 i = 0;
    689            u16 refcolumn = 319;
    690          
    691            /* Send the string character by character on lCD */
    692            while ((*ptr != 0) & (i < 20))
    693            {
    694              /* Display one character on LCD */
    695              LCD_DisplayChar(Line, refcolumn, *ptr);
    696              /* Decrement the column position by 16 */
    697              refcolumn -= 16;
    698              /* Point on the next character */
    699              ptr++;
    700              /* Increment the character counter */
    701              i++;
    702            }
    703          }
    704          
    705          /*******************************************************************************
    706          * Function Name  : LCD_DisplayString
    707          * Description    : Displays a maximum of 200 char on the LCD.
    708          * Input          : - Line: the starting Line where to display the character shape.
    709          *                    This parameter can be one of the following values:
    710          *                       - Linex: where x can be 0..9
    711          *                  - *ptr: pointer to string to display on LCD.
    712          * Output         : None
    713          * Return         : None
    714          *******************************************************************************/
    715          void LCD_DisplayString(u8 Line, u8 *ptr)
    716          {
    717            u32 i = 0, column = 0, index = 0, spaceindex = 0;
    718            u16 refcolumn = 319;
    719            u32 length = 0;
    720          
    721            /* Get the string length */
    722            length = StrLength(ptr);
    723            if(length > 200)
    724            {
    725              /* Set the Cursor position */
    726              LCD_SetCursor(Line, 0x013F);
    727              /* Clear the Selected Line */
    728              LCD_ClearLine(Line);
    729              LCD_DisplayStringLine(Line, "   String too long  ");
    730            }
    731            else
    732            {
    733              /* Set the Cursor position */
    734              LCD_SetCursor(Line, 0x013F);
    735              /* Clear the Selected Line */
    736              LCD_ClearLine(Line);
    737          
    738              while(length--)
    739              {
    740                if(index == 20)
    741                {
    742                  if(*ptr == 0x20)
    743                  {
    744                    ptr++;
    745                  }
    746                  else
    747                  {
    748                    for(i = 0; i < spaceindex; i++)
    749                    {
    750                      LCD_DisplayChar(Line, column, ' ');
    751                      column -= 16;
    752                    }
    753                    ptr -= (spaceindex - 1);
    754                    length += (spaceindex - 1);
    755                  }
    756                  Line += 24;
    757                  /* Clear the Selected Line */
    758                  LCD_ClearLine(Line);
    759                  refcolumn = 319;
    760                  index = 0;
    761                }
    762                /* Display one character on LCD */
    763                LCD_DisplayChar(Line, refcolumn, *ptr);
    764          
    765                /* Increment character number in one line */
    766                index++;
    767          
    768                /* Decrement the column position by 16 */
    769                refcolumn -= 16;
    770                /* Point on the next character */
    771                ptr++;
    772                /* Increment the number of character after the last space */
    773                spaceindex++;
    774                if(*ptr == 0x20)
    775                {
    776                  spaceindex = 0;
    777                  column = refcolumn - 16;
    778                }
    779              }
    780            }
    781          }
    782          
    783          /*******************************************************************************
    784          * Function Name  : LCD_ScrollText
    785          * Description    :
    786          * Input          :
    787          * Output         : None
    788          * Return         : None
    789          *******************************************************************************/
    790          void LCD_ScrollText(u8 Line, u8 *ptr)
    791          {
    792            u32 i = 0, length = 0, x = 0;
    793            u16 refcolumn = 319;
    794          
    795            /* Get the string length */
    796            length = StrLength(ptr);
    797          
    798            while(1)
    799            {
    800              /* Send the string character by character on lCD */
    801              while ((*ptr != 0) & (i < 20))
    802              {
    803                /* Display one character on LCD */
    804                LCD_DisplayChar(Line, refcolumn, *ptr);
    805                /* Decrement the column position by 16 */
    806                refcolumn -= 16;
    807                /* Point on the next character */
    808                ptr++;
    809                /* Increment the character counter */
    810                i++;
    811              }
    812              vTaskDelay( 100 / portTICK_RATE_MS );
    813              i = 0;
    814              //LCD_ClearLine(Line);
    815              ptr -= length;
    816              x++;
    817              if(refcolumn < 16)
    818              {
    819                x = 0;
    820              }
    821              refcolumn = 319 - (x * 16);
    822            }
    823          }
    824          
    825          /*******************************************************************************
    826          * Function Name  : LCD_SetDisplayWindow
    827          * Description    : Sets a display window
    828          * Input          : - Xpos: specifies the X position.
    829          *                  - Ypos: specifies the Y position.
    830          *                  - Height: display window height.
    831          *                  - Width: display window width.
    832          * Output         : None
    833          * Return         : None
    834          *******************************************************************************/
    835          void LCD_SetDisplayWindow(u8 Xpos, u16 Ypos, u8 Height, u16 Width)
    836          {
    837            LCD_WriteReg(R1, 0xD0);
    838            LCD_WriteReg(R5, 0x14);
    839          
    840            LCD_WriteReg(R69, Xpos);
    841            LCD_WriteReg(R70, (Xpos + Height + 1));
    842          
    843            LCD_WriteReg(R71, ((Ypos & 0x100)>> 8));
    844            LCD_WriteReg(R72, (Ypos & 0xFF));
    845          
    846            LCD_WriteReg(R73, (((Ypos + Width + 1) & 0x100)>> 8));
    847            LCD_WriteReg(R74, ((Ypos + Width + 1) & 0xFF));
    848          
    849            LCD_SetCursor(Xpos, Ypos);
    850          }
    851          
    852          /*******************************************************************************
    853          * Function Name  : LCD_DrawLine
    854          * Description    : Displays a line.
    855          * Input          : - Xpos: specifies the X position.
    856          *                  - Ypos: specifies the Y position.
    857          *                  - Length: line length.
    858          *                  - Direction: line direction.
    859          *                    This parameter can be one of the following values: Vertical
    860          *                    or Horizontal.
    861          * Output         : None
    862          * Return         : None
    863          *******************************************************************************/
    864          void LCD_DrawLine(u8 Xpos, u16 Ypos, u16 Length, u8 Direction)
    865          {
    866            u32 i = 0;
    867          
    868            LCD_SetCursor(Xpos, Ypos);
    869          
    870            if(Direction == Horizontal)
    871            {
    872              for(i = 0; i < Length; i++)
    873              {
    874                LCD_WriteRAM(TextColor);
    875              }
    876            }
    877            else
    878            {
    879             for(i = 0; i < Length; i++)
    880              {
    881          
    882                LCD_WriteRAM(TextColor);
    883                Xpos++;
    884                LCD_SetCursor(Xpos, Ypos);
    885              }
    886            }
    887          }
    888          
    889          /*******************************************************************************
    890          * Function Name  : LCD_DrawRect
    891          * Description    : Displays a rectangle.
    892          * Input          : - Xpos: specifies the X position.
    893          *                  - Ypos: specifies the Y position.
    894          *                  - Height: display rectangle height.
    895          *                  - Width: display rectangle width.
    896          * Output         : None
    897          * Return         : None
    898          *******************************************************************************/
    899          void LCD_DrawRect(u8 Xpos, u16 Ypos, u8 Height, u16 Width)
    900          {
    901            LCD_DrawLine(Xpos, Ypos, Width, Horizontal);
    902            LCD_DrawLine((Xpos + Height), Ypos, Width, Horizontal);
    903          
    904            LCD_DrawLine(Xpos, Ypos, Height, Vertical);
    905            LCD_DrawLine(Xpos, (Ypos - Width + 1), Height, Vertical);
    906          }
    907          
    908          /*******************************************************************************
    909          * Function Name  : LCD_DrawCircle
    910          * Description    : Displays a circle.
    911          * Input          : - Xpos: specifies the X position.
    912          *                  - Ypos: specifies the Y position.
    913          *                  - Height: display rectangle height.
    914          *                  - Width: display rectangle width.
    915          * Output         : None
    916          * Return         : None
    917          *******************************************************************************/
    918          void LCD_DrawCircle(u8 Xpos, u16 Ypos, u16 Radius)
    919          {
    920            s32	D;	/* Decision Variable */
    921            u32	CurX;	/* Current X Value */
    922            u32	CurY;	/* Current Y Value */
    923          
    924            D = 3 - (Radius << 1);
    925            CurX = 0;
    926            CurY = Radius;
    927          
    928            while (CurX <= CurY)
    929            {
    930              LCD_SetCursor(Xpos + CurX, Ypos + CurY);
    931              LCD_WriteRAM(TextColor);
    932              LCD_SetCursor(Xpos + CurX, Ypos - CurY);
    933              LCD_WriteRAM(TextColor);
    934              LCD_SetCursor(Xpos - CurX, Ypos + CurY);
    935              LCD_WriteRAM(TextColor);
    936              LCD_SetCursor(Xpos - CurX, Ypos - CurY);
    937              LCD_WriteRAM(TextColor);
    938              LCD_SetCursor(Xpos + CurY, Ypos + CurX);
    939              LCD_WriteRAM(TextColor);
    940              LCD_SetCursor(Xpos + CurY, Ypos - CurX);
    941              LCD_WriteRAM(TextColor);
    942              LCD_SetCursor(Xpos - CurY, Ypos + CurX);
    943              LCD_WriteRAM(TextColor);
    944              LCD_SetCursor(Xpos - CurY, Ypos - CurX);
    945              LCD_WriteRAM(TextColor);
    946          
    947              if (D < 0)
    948              {
    949                D += (CurX << 2) + 6;
    950              }
    951              else
    952              {
    953                D += ((CurX - CurY) << 2) + 10;
    954                CurY--;
    955              }
    956              CurX++;
    957            }
    958          }
    959          
    960          /*******************************************************************************
    961          * Function Name  : LCD_DrawMonoPict
    962          * Description    : Displays a monocolor picture.
    963          * Input          : - Pict: pointer to the picture array.
    964          * Output         : None
    965          * Return         : None
    966          *******************************************************************************/
    967          void LCD_DrawMonoPict(uc32 *Pict)
    968          {
    969            u32 index = 0, i = 0;
    970          
    971            LCD_SetCursor(0, 319);
    972          
    973            for(index = 0; index < 2400; index++)
    974            {
    975              for(i = 0; i < 32; i++)
    976              {
    977                if((Pict[index] & (1 << i)) == 0x00)
    978                {
    979                  LCD_WriteRAM(BackColor);
    980                }
    981                else
    982                {
    983                  LCD_WriteRAM(TextColor);
    984                }
    985              }
    986            }
    987          }
    988          
    989          /*******************************************************************************
    990          * Function Name  : LCD_DrawBMP
    991          * Description    : Displays a bitmap picture loaded in the SPI Flash.
    992          * Input          : - BmpAddress: Bmp picture address in the SPI Flash.
    993          * Output         : None
    994          * Return         : None
    995          *******************************************************************************/
    996          void LCD_DrawBMP(u32 BmpAddress)
    997          {
    998            u32 i = 0;
    999          
   1000            LCD_WriteReg(R1, 0xD0);
   1001            LCD_WriteReg(R5, 0x04);
   1002          
   1003            LCD_SetCursor(239, 0x013F);
   1004          
   1005            SPI_FLASH_StartReadSequence(BmpAddress);
   1006          
   1007            /* Disable SPI1  */
   1008            SPI_Cmd(SPI1, DISABLE);
   1009            /* SPI in 16-bit mode */
   1010            SPI_DataSizeConfig(SPI1, SPI_DataSize_16b);
   1011            /* Enable SPI1  */
   1012            SPI_Cmd(SPI1, ENABLE);
   1013          
   1014            for(i = 0; i < 76800; i++)
   1015            {
   1016              LCD_WriteRAM(__REV_HalfWord(SPI_FLASH_SendHalfWord(0xA5A5)));
   1017            }
   1018          
   1019            /* Deselect the FLASH: Chip Select high */
   1020            SPI_FLASH_ChipSelect(1);
   1021          
   1022            /* Disable SPI1  */
   1023            SPI_Cmd(SPI1, DISABLE);
   1024            /* SPI in 8-bit mode */
   1025            SPI_DataSizeConfig(SPI1, SPI_DataSize_8b);
   1026            /* Enable SPI1  */
   1027            SPI_Cmd(SPI1, ENABLE);
   1028          }
   1029          
   1030          /*******************************************************************************
   1031          * Function Name  : LCD_WriteReg
   1032          * Description    : Writes to the selected LCD register.
   1033          * Input          : - LCD_Reg: address of the selected register.
   1034          *                  - LCD_RegValue: value to write to the selected register.
   1035          * Output         : None
   1036          * Return         : None
   1037          *******************************************************************************/
   1038          void LCD_WriteReg(u8 LCD_Reg, u8 LCD_RegValue)
   1039          {
   1040            u16 tmp = 0;
   1041          
   1042            LCD_CtrlLinesWrite(GPIOD, CtrlPin_NWR, Bit_RESET);
   1043            LCD_CtrlLinesWrite(GPIOD, CtrlPin_RS, Bit_RESET);
   1044            LCD_CtrlLinesWrite(GPIOB, CtrlPin_NCS, Bit_RESET);
   1045          
   1046            tmp = LCD_Reg << 8;
   1047            tmp |= LCD_RegValue;
   1048          
   1049            SPI_SendData(SPI2, tmp);
   1050            while(SPI_GetFlagStatus(SPI2, SPI_FLAG_TXE) == RESET)
   1051            {
   1052            }
   1053          
   1054            LCD_CtrlLinesWrite(GPIOB, CtrlPin_NCS, Bit_SET);
   1055          }
   1056          
   1057          /*******************************************************************************
   1058          * Function Name  : LCD_ReadReg
   1059          * Description    : Reads the selected LCD Register.
   1060          * Input          : None
   1061          * Output         : None
   1062          * Return         : LCD Register Value.
   1063          *******************************************************************************/
   1064          u8 LCD_ReadReg(u8 LCD_Reg)
   1065          {
   1066            u16 tmp = 0;
   1067          
   1068            LCD_CtrlLinesWrite(GPIOD, CtrlPin_NWR, Bit_RESET);
   1069            LCD_CtrlLinesWrite(GPIOD, CtrlPin_RS, Bit_RESET);
   1070            LCD_CtrlLinesWrite(GPIOB, CtrlPin_NCS, Bit_RESET);
   1071          
   1072            while(SPI_GetFlagStatus(SPI2, SPI_FLAG_TXE) == RESET)
   1073            {
   1074            }
   1075            SPI_SendData(SPI2, LCD_Reg);
   1076          
   1077            LCD_CtrlLinesWrite(GPIOD, CtrlPin_NWR, Bit_SET);
   1078          
   1079            while(SPI_GetFlagStatus(SPI2, SPI_FLAG_TXE) == RESET)
   1080            {
   1081            }
   1082            SPI_SendData(SPI2, 0xFF);
   1083          
   1084            while(SPI_GetFlagStatus(SPI2, SPI_FLAG_RXNE)== RESET)
   1085            {
   1086            }
   1087            tmp = SPI_ReceiveData(SPI2);
   1088          
   1089            LCD_CtrlLinesWrite(GPIOB, CtrlPin_NCS, Bit_SET);
   1090            return tmp;
   1091          }
   1092          
   1093          /*******************************************************************************
   1094          * Function Name  : LCD_WriteRAM
   1095          * Description    : Writes to the LCD RAM.
   1096          * Input          : - RGB_Code: the pixel color in RGB mode (5-6-5).
   1097          * Output         : None
   1098          * Return         : None
   1099          *******************************************************************************/
   1100          void LCD_WriteRAM(u16 RGB_Code)
   1101          {
   1102            LCD_CtrlLinesWrite(GPIOD, CtrlPin_NWR, Bit_RESET);
   1103            LCD_CtrlLinesWrite(GPIOD, CtrlPin_RS, Bit_SET);
   1104            LCD_CtrlLinesWrite(GPIOB, CtrlPin_NCS, Bit_RESET);
   1105          
   1106            SPI_SendData(SPI2, RGB_Code);
   1107            while(SPI_GetFlagStatus(SPI2, SPI_FLAG_TXE) == RESET)
   1108            {
   1109            }
   1110          
   1111            LCD_CtrlLinesWrite(GPIOB, CtrlPin_NCS, Bit_SET);
   1112          }
   1113          
   1114          /*******************************************************************************
   1115          * Function Name  : LCD_ReadRAM
   1116          * Description    : Reads the LCD RAM.
   1117          * Input          : None
   1118          * Output         : None
   1119          * Return         : LCD RAM Value.
   1120          *******************************************************************************/
   1121          u16  LCD_ReadRAM(void)
   1122          {
   1123            u16 tmp = 0;
   1124          
   1125            LCD_CtrlLinesWrite(GPIOD, CtrlPin_NWR, Bit_SET);
   1126            LCD_CtrlLinesWrite(GPIOD, CtrlPin_RS, Bit_SET);
   1127            LCD_CtrlLinesWrite(GPIOB, CtrlPin_NCS, Bit_RESET);
   1128          
   1129            while(SPI_GetFlagStatus(SPI2, SPI_FLAG_TXE) == RESET)
   1130            {
   1131            }
   1132            SPI_SendData(SPI2, 0xFF);
   1133            while(SPI_GetFlagStatus(SPI2, SPI_FLAG_RXNE)==RESET)
   1134            {
   1135            }
   1136            tmp = SPI_ReceiveData(SPI2);
   1137          
   1138            LCD_CtrlLinesWrite(GPIOB, CtrlPin_NCS, Bit_SET);
   1139          
   1140            return tmp;
   1141          }
   1142          
   1143          /*******************************************************************************
   1144          * Function Name  : LCD_PowerOn
   1145          * Description    :
   1146          * Input          : None
   1147          * Output         : None
   1148          * Return         : None
   1149          *******************************************************************************/
   1150          void LCD_PowerOn(void)
   1151          {
   1152            /* Power On Set */
   1153            LCD_WriteReg(R28, 0x73);
   1154            LCD_WriteReg(R36, 0x74);
   1155            LCD_WriteReg(R30, 0x01);
   1156            LCD_WriteReg(R24, 0xC1);
   1157            vTaskDelay( 10 / portTICK_RATE_MS ); /* Delay 10 ms */
   1158            LCD_WriteReg(R24, 0xE1);
   1159            LCD_WriteReg(R24, 0xF1);
   1160            vTaskDelay( 60 / portTICK_RATE_MS ); /* Delay 60 ms */
   1161            LCD_WriteReg(R24, 0xF5);
   1162            vTaskDelay( 60 / portTICK_RATE_MS ); /* Delay 60 ms */
   1163            LCD_WriteReg(R27, 0x09);
   1164            vTaskDelay( 10 / portTICK_RATE_MS ); /* Delay 10 ms */
   1165            LCD_WriteReg(R31, 0x11);
   1166            LCD_WriteReg(R32, 0x0E);
   1167            LCD_WriteReg(R30, 0x81);
   1168            vTaskDelay( 10 / portTICK_RATE_MS ); /* Delay 10 ms */
   1169          }
   1170          
   1171          /*******************************************************************************
   1172          * Function Name  : LCD_DisplayOn
   1173          * Description    : Enables the Display.
   1174          * Input          : None
   1175          * Output         : None
   1176          * Return         : None
   1177          *******************************************************************************/
   1178          void LCD_DisplayOn(void)
   1179          {
   1180            LCD_WriteReg(R1, 0x50);
   1181            LCD_WriteReg(R5, 0x04);
   1182          
   1183            /* Display On */
   1184            LCD_WriteReg(R0, 0x80);
   1185            LCD_WriteReg(R59, 0x01);
   1186            vTaskDelay( 40 / portTICK_RATE_MS );                 /* Delay 40 ms */
   1187            LCD_WriteReg(R0, 0x20);
   1188          }
   1189          
   1190          /*******************************************************************************
   1191          * Function Name  : LCD_DisplayOff
   1192          * Description    : Disables the Display.
   1193          * Input          : None
   1194          * Output         : None
   1195          * Return         : None
   1196          *******************************************************************************/
   1197          void LCD_DisplayOff(void)
   1198          {
   1199            /* Display Off */
   1200            LCD_WriteReg(R0, 0xA0);
   1201            vTaskDelay( 40 / portTICK_RATE_MS );                 /* Delay 40 ms */
   1202            LCD_WriteReg(R59, 0x00);
   1203          }
   1204          
   1205          /*******************************************************************************
   1206          * Function Name  : LCD_CtrlLinesConfig
   1207          * Description    : Configures LCD control lines in Output Push-Pull mode.
   1208          * Input          : None
   1209          * Output         : None
   1210          * Return         : None
   1211          *******************************************************************************/
   1212          void LCD_CtrlLinesConfig(void)
   1213          {
   1214            GPIO_InitTypeDef GPIO_InitStructure;
   1215          
   1216            /* Configure NCS (PB.02) in Output Push-Pull mode */
   1217            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   1218            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   1219            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   1220            GPIO_Init(GPIOB, &GPIO_InitStructure);
   1221          
   1222            /* Configure NWR(RNW), RS (PD.15, PD.07) in Output Push-Pull mode */
   1223            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_15;
   1224            GPIO_Init(GPIOD, &GPIO_InitStructure);
   1225          }
   1226          
   1227          /*******************************************************************************
   1228          * Function Name  : LCD_CtrlLinesWrite
   1229          * Description    : Sets or reset LCD control lines.
   1230          * Input          : - GPIOx: where x can be B or D to select the GPIO peripheral.
   1231          *                  - CtrlPins: the Control line. This parameter can be:
   1232          *                       - CtrlPin_NCS: Chip Select pin (PB.02)
   1233          *                       - CtrlPin_NWR: Read/Write Selection pin (PD.15)
   1234          *                       - CtrlPin_RS: Register/RAM Selection pin (PD.07)
   1235          *                  - BitVal: specifies the value to be written to the selected bit.
   1236          *                    This parameter can be:
   1237          *                       - Bit_RESET: to clear the port pin
   1238          *                       - Bit_SET: to set the port pin
   1239          * Output         : None
   1240          * Return         : None
   1241          *******************************************************************************/
   1242          void LCD_CtrlLinesWrite(GPIO_TypeDef* GPIOx, u16 CtrlPins, BitAction BitVal)
   1243          {
   1244            /* Set or Reset the control line */
   1245            GPIO_WriteBit(GPIOx, CtrlPins, BitVal);
   1246          }
   1247          
   1248          /*******************************************************************************
   1249          * Function Name  : LCD_SPIConfig
   1250          * Description    : Configures the SPI2 interface.
   1251          * Input          : None
   1252          * Output         : None
   1253          * Return         : None
   1254          *******************************************************************************/
   1255          void LCD_SPIConfig(void)
   1256          {
   1257            SPI_InitTypeDef    SPI_InitStructure;
   1258            GPIO_InitTypeDef   GPIO_InitStructure;
   1259          
   1260            /* Enable GPIOA clock */
   1261            RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
   1262          
   1263            /* Enable SPI2 clock  */
   1264            RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
   1265          
   1266            /* Configure SPI2 pins: NSS, SCK, MISO and MOSI */
   1267            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
   1268            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   1269            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   1270            GPIO_Init(GPIOB, &GPIO_InitStructure);
   1271          
   1272            /* SPI2 Config */
   1273            SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
   1274            SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
   1275            SPI_InitStructure.SPI_DataSize = SPI_DataSize_16b;
   1276            SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
   1277            SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
   1278            SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
   1279            SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
   1280            SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
   1281            SPI_Init(SPI2, &SPI_InitStructure);
   1282          
   1283            /* SPI2 enable */
   1284            SPI_Cmd(SPI2, ENABLE);
   1285          }
   1286          
   1287          /*******************************************************************************
   1288          * Function Name  : StrLength
   1289          * Description    : Returns length of string.
   1290          * Input          : - Str: Character Pointer.
   1291          * Output         : None
   1292          * Return         : String length.
   1293          *******************************************************************************/
   1294          static u32 StrLength(u8 *Str)
   1295          {
   1296            u32 Index = 0;
   1297          
   1298            /* Increment the Index unless the end of string */
   1299            for(Index = 0; *Str != '\0'; Str++, Index++)
   1300            {
   1301            }
   1302          
   1303            return Index;
   1304          }
   1305          
   1306          /******************* (C) COPYRIGHT 2007 STMicroelectronics *****END OF FILE****/

Errors: 7
Warnings: 14
